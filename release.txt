RELEASE NOTES
MonetDB JDBC driver version 2.28 (Liberica/MCL-1.17)
Release date: 2018-05-24

This JDBC driver is designed for use with MonetDB, a main-memory column-store RDBMS.
For more information see https://www.monetdb.org/

The MonetDB JDBC connection URL format to use is:
  jdbc:monetdb://<hostname>[:<portnr>]/<databasename>[?<property>=<value>[&<property>=<value>]]

Note: For a successful connection the database name part must be provided
 and be equal to the name of the database served by the mserver5 process running on
 the specified host and listening to the specified port number (default port is 50000).

Supported connection properties are:
	user=<login name>
	password=<secret value>
	so_timeout=<time in milliseconds>
	hash=<SHA512, SHA384, SHA256, SHA1 and MD5>
	language=<sql or mal>		default is: sql
	treat_blob_as_binary=true	default is: false
	treat_clob_as_varchar=true	default is: false
	debug=true			default is: false
	logfile=<name of logfile>

Multiple connection properties are separated by the & character.
For example:
  jdbc:monetdb://localhost:41000/mydb?user=monetdb&password=monetdb&so_timeout=7000&treat_clob_as_varchar=true

See also: https://www.monetdb.org/Documentation/Manuals/SQLreference/Programming/JDBC

Note: as of Jul2015 release (monetdb-jdbc-2.17.jar) we compile all
 the java sources to target: Java 1.7 so you need a JRE/JDK JVM
 of version 1.7 or higher to use it.


JDBC COMPLIANCE
The MonetDB JDBC driver complies to JDBC 4.1 definition, see
 http://docs.oracle.com/javase/7/docs/technotes/guides/jdbc/index.html

Within the current implementation not all functionalities of the JDBC
interface are available.  It is believed, however, that this
implementation is rich enough to be suitable for a majority of
application settings.

Below a list of (un)supported features can be found.
Please read this list if you intend to use this JDBC driver.

If you feel some features are missing or have encountered an issue/bug,
please let us know at our bugtracker:
  https://www.monetdb.org/bugzilla/


Currently implemented JDBC 4.1 interfaces include:
  * java.sql.Driver

  * java.sql.Connection
    The next features/methods are NOT useable/supported:
    - createArrayOf, createNClob, createStruct, createSQLXML
    - createStatement with result set holdability
    - prepareStatement with array of column indices or column names
    - setHoldability (close/hold cursors over commit is not configurable)

    NOTE: be sure to check for warnings after setting concurrencies or
          isolation levels; MonetDB currently does not support anything
          else but "fully serializable" transactions.

  * java.sql.DatabaseMetaData

  * java.sql.Statement
    The next features/methods are NOT useable/supported:
    - cancel (query execution cannot be terminated, once started)
       see also: https://www.monetdb.org/bugzilla/show_bug.cgi?id=6222
    - execute with column indices or names
    - executeUpdate with column indices or names
    - setMaxFieldSize
    - setCursorName
    - setEscapeProcessing on

  * java.sql.PreparedStatement
    The next features/methods are NOT useable/supported:
    - setArray
    - setAsciiStream, setBinaryStream, setUnicodeStream
    - setBlob
    - setNClob
    - setRef, setRowId, setSQLXML

  * java.sql.ParameterMetaData

  * java.sql.CallableStatement
    The next methods are NOT useable/supported:
    - all getXyz(parameterIndex/parameterName, ...) methods because
      output parameters in stored procedures are not supported by MonetDB
    - all registerOutParameter(parameterIndex/parameterName, int sqlType, ...) methods
      because output parameters in stored procedures are not supported by MonetDB
    - wasNull() method because output parameters in stored procedures are
      not supported by MonetDB

  * java.sql.ResultSet
    The next features/methods are NOT useable/supported:
    - getArray
    - getAsciiStream, getUnicodeStream
    - getNClob
    - getRef, getRowId, getSQLXML
    - All methods related to updateable result sets

  * java.sql.ResultSetMetaData

  * java.sql.SavePoint

  * java.sql.Wrapper

  * java.sql.Blob
    A simple implementation using a byte[] to store the whole BLOB
    The next features/methods are NOT useable/supported:
    - setBinaryStream

  * java.sql.Clob
    A simple implementation using a StringBuilder to store the whole CLOB
    The next features/methods are NOT useable/supported:
    - setAsciiStream
    - setCharacterStream

  * java.sql.SQLData
    implemented by class: nl.cwi.monetdb.jdbc.types.INET
            and by class: nl.cwi.monetdb.jdbc.types.URL

  * javax.sql.DataSource (not tested)


The next java.sql.* interfaces are NOT implemented:
  * java.sql.Array
  * java.sql.NClob
  * java.sql.Ref
  * java.sql.Rowid
  * java.sql.SQLInput
  * java.sql.SQLOutput
  * java.sql.SQLXML
  * java.sql.Struct

